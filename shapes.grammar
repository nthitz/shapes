/*
 * Simple Shape Drawing Grammar
 */
{
  let assign  = require('lodash/assign')
}

Program "program"
  = e1:Expression _ e2:Expression? _ e3:Expression? _ e4:Expression? {
    let o = assign({}, e1, e2, e3, e4)
    // console.log(o)
    return o

  }

Expression "exp"
 = _ s: Shape _ { return { shape: s } }
 / _ s: Size _ { return s }
 / _ a: Angle _ { return {angle: a} }
 / _ c: Condition _ { return {condition: c} }

Angle "angle"
  = random:"random"i? _ "angle"i _ modifier:Modifier? {
    // console.log(modifier)
    return {
      random: random !== null,
      influence: modifier
    }
  }

Modifier "modifier"
 = "influenced by"i _ influence:Influence {
  return influence
 }

Influence "influence"
 = "flow"i _ "field"i { return 'flowField' }
 / "orientation to center"i { return 'centerOrientation' }

Condition "condition"
  = OnlyDrawIf? _ Intersecting _ Last _ last:Integer _ OrFirst? {
    return {
      intersect: true,
      last: last,
    }
  }
  / OnlyDrawIf? _ Not _ Intersecting _ Last _ last:Integer _ OrFirst? {
    return {
      intersect: false,
      last: last,
    }
  }
  / OnlyDrawIf? _ Intersecting _ OrFirst?{
    return {
      intersect: true,
    }
  }
  / OnlyDrawIf? _ Not _ Intersecting _ OrFirst? {
    return {
      intersect: false,
    }
  }



Object "object"
  = size:Size _ shape:Shape {
    return {
      size: size,
      shape: shape,
    }
  }


Shape "shape"
  = "line"i { return { type: text().toLowerCase() } }
  / "circle"i { return { type: text().toLowerCase() }}
  / n:Polygon { return { type: 'polygon', n: n }}

Polygon "polygon"
  = "triangle"i { return 3}
  / "square"i { return 4 }
  / "pentagon"i { return 5 }
  / "hexagon"i { return 6 }
  / "septagon"i { return 7 }
  / "octagon"i { return 8 }
  / n:Integer _ "-"? "gon" { return n }


Size "size"
  = size:Integer "px"i { return { size: size } }

Intersecting "intersecting"
  = "intersecting"i
  / "touching"i

OnlyDrawIf "only draw if"
  = "only"i _ "draw"i _ "if"i

OrFirst "or first"
  = "or first"i

Not "not"
  = "not"i
  / "!"

Last "last"
  = "last"i

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = [ \t\n\r]*

