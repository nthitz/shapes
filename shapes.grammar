/*
 * Simple Arithmetics Grammar
 * ==========================
 *
 * Accepts expressions like "2 * (3 + 4)" and computes their value.
 */
{
  let _ = require('lodash')
}
Program "program"
  = _ object:Object _ angle:Angle? _ condition:Condition? _ {
    // console.log(object)
    // console.log(angle)
    object.angle = angle
    object.condition = condition
    return object
  }

Expression "exp"
 = Object
// / Modifier
// / Influence
// / Condition

Angle "angle"
  = random:"random"? _ "angle" _ modifier:Modifier? {
    // console.log(modifier)
    return {
      random: random !== null,
      influence: modifier
    }
  }
  / _ { return null }

Modifier "modifier"
 = "influenced by" _ influence:Influence {
  return influence
 }

Influence "influence"
 = "flow" _ "field" { return 'flowField' }
 / "orientation to center" { return 'centerOrientation' }

Condition "condition"
  = "only draw if"? _ "intersecting last" _ last:Integer _ "or first"? {
    return {
      intersect: true,
      last: last,
    }
  }
  / "only draw if"? _ "not intersecting last" _ last:Integer _ "or first"? {
    return {
      intersect: false,
      last: last,
    }
  }
  / "only draw if"? _ "intersecting" _ "or first"?{
    return {
      intersect: true,
    }
  }
  / "only draw if"? _ "not intersecting" _ "or first"? {
    return {
      intersect: false,
    }
  }

Object "object"
  = size:Size _ shape:Shape {
    return {
      size: size,
      shape: shape,
    }
  }


Shape "shape"
  = "line" { return { type: text() } }
  / "circle" { return { type: text() }}
  / n:Polygon { return { type: 'polygon', n: n }}

Polygon "polygon"
  = "triangle" { return 3}
  / "square" { return 4 }
  / "pentagon" { return 5 }
  / "hexagon" { return 6 }
  / "septagon" { return 7 }
  / "octagon" { return 8 }
  / n:Integer _ "-"? "gon" { return n }


Size "size"
  = size:Integer "px" { return size }

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = [ \t\n\r]*

